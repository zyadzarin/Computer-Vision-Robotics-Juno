// Generated by gencpp from file home_monitoring_pkg/PredictionMsg.msg
// DO NOT EDIT!


#ifndef HOME_MONITORING_PKG_MESSAGE_PREDICTIONMSG_H
#define HOME_MONITORING_PKG_MESSAGE_PREDICTIONMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace home_monitoring_pkg
{
template <class ContainerAllocator>
struct PredictionMsg_
{
  typedef PredictionMsg_<ContainerAllocator> Type;

  PredictionMsg_()
    : label_mask()
    , label_mask_prob()
    , x_start(0)
    , x_end(0)
    , y_start(0)
    , y_end(0)
    , label_pose()
    , label_pose_prob()
    , x_pose(0.0)
    , y_pose(0.0)  {
    }
  PredictionMsg_(const ContainerAllocator& _alloc)
    : label_mask(_alloc)
    , label_mask_prob(_alloc)
    , x_start(0)
    , x_end(0)
    , y_start(0)
    , y_end(0)
    , label_pose(_alloc)
    , label_pose_prob(_alloc)
    , x_pose(0.0)
    , y_pose(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _label_mask_type;
  _label_mask_type label_mask;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _label_mask_prob_type;
  _label_mask_prob_type label_mask_prob;

   typedef int64_t _x_start_type;
  _x_start_type x_start;

   typedef int64_t _x_end_type;
  _x_end_type x_end;

   typedef int64_t _y_start_type;
  _y_start_type y_start;

   typedef int64_t _y_end_type;
  _y_end_type y_end;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _label_pose_type;
  _label_pose_type label_pose;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _label_pose_prob_type;
  _label_pose_prob_type label_pose_prob;

   typedef float _x_pose_type;
  _x_pose_type x_pose;

   typedef float _y_pose_type;
  _y_pose_type y_pose;





  typedef boost::shared_ptr< ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator> const> ConstPtr;

}; // struct PredictionMsg_

typedef ::home_monitoring_pkg::PredictionMsg_<std::allocator<void> > PredictionMsg;

typedef boost::shared_ptr< ::home_monitoring_pkg::PredictionMsg > PredictionMsgPtr;
typedef boost::shared_ptr< ::home_monitoring_pkg::PredictionMsg const> PredictionMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator1> & lhs, const ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator2> & rhs)
{
  return lhs.label_mask == rhs.label_mask &&
    lhs.label_mask_prob == rhs.label_mask_prob &&
    lhs.x_start == rhs.x_start &&
    lhs.x_end == rhs.x_end &&
    lhs.y_start == rhs.y_start &&
    lhs.y_end == rhs.y_end &&
    lhs.label_pose == rhs.label_pose &&
    lhs.label_pose_prob == rhs.label_pose_prob &&
    lhs.x_pose == rhs.x_pose &&
    lhs.y_pose == rhs.y_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator1> & lhs, const ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace home_monitoring_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "715dc63a1702758b9d710539c966074b";
  }

  static const char* value(const ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x715dc63a1702758bULL;
  static const uint64_t static_value2 = 0x9d710539c966074bULL;
};

template<class ContainerAllocator>
struct DataType< ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "home_monitoring_pkg/PredictionMsg";
  }

  static const char* value(const ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string label_mask\n"
"string label_mask_prob\n"
"int64 x_start\n"
"int64 x_end\n"
"int64 y_start\n"
"int64 y_end\n"
"string label_pose\n"
"string label_pose_prob\n"
"float32 x_pose\n"
"float32 y_pose\n"
"\n"
"\n"
;
  }

  static const char* value(const ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label_mask);
      stream.next(m.label_mask_prob);
      stream.next(m.x_start);
      stream.next(m.x_end);
      stream.next(m.y_start);
      stream.next(m.y_end);
      stream.next(m.label_pose);
      stream.next(m.label_pose_prob);
      stream.next(m.x_pose);
      stream.next(m.y_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PredictionMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::home_monitoring_pkg::PredictionMsg_<ContainerAllocator>& v)
  {
    s << indent << "label_mask: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.label_mask);
    s << indent << "label_mask_prob: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.label_mask_prob);
    s << indent << "x_start: ";
    Printer<int64_t>::stream(s, indent + "  ", v.x_start);
    s << indent << "x_end: ";
    Printer<int64_t>::stream(s, indent + "  ", v.x_end);
    s << indent << "y_start: ";
    Printer<int64_t>::stream(s, indent + "  ", v.y_start);
    s << indent << "y_end: ";
    Printer<int64_t>::stream(s, indent + "  ", v.y_end);
    s << indent << "label_pose: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.label_pose);
    s << indent << "label_pose_prob: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.label_pose_prob);
    s << indent << "x_pose: ";
    Printer<float>::stream(s, indent + "  ", v.x_pose);
    s << indent << "y_pose: ";
    Printer<float>::stream(s, indent + "  ", v.y_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HOME_MONITORING_PKG_MESSAGE_PREDICTIONMSG_H
